import{_ as o,p,q as e,Q as a,t as s,v as t,a1 as c}from"./framework-344bb0e4.js";const u={},l={id:"frontmatter-title-for-core",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),r={class:"command-title"},d=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; use (module) ...rest</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>module</code>: Module or module file</li><li><code>...rest</code>: Which members of the module to import</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>See <code>help std</code> for the standard library module. See <code>help modules</code> to list all available modules.</p><p>This command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Define a custom command in a module and call it</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> module spam <span class="token punctuation">{</span> <span class="token builtin class-name">export</span> def foo <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> use spam foo<span class="token punctuation">;</span> foo
foo
</code></pre></div><p>Define a custom command that participates in the environment in a module and call it</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> module foo <span class="token punctuation">{</span> <span class="token builtin class-name">export</span> def-env bar <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> let-env FOO_BAR <span class="token operator">=</span> <span class="token string">&quot;BAZ&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> use foo bar<span class="token punctuation">;</span> bar<span class="token punctuation">;</span> <span class="token variable">$env</span>.FOO_BAR
BAZ
</code></pre></div><p>Use a plain module name to import its definitions qualified by the module name</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> module spam <span class="token punctuation">{</span> <span class="token builtin class-name">export</span> def foo <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token builtin class-name">export</span> def bar <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> use spam<span class="token punctuation">;</span> <span class="token punctuation">(</span>spam foo<span class="token punctuation">)</span> + <span class="token punctuation">(</span>spam bar<span class="token punctuation">)</span>
foobar
</code></pre></div><p>Specify * to use all definitions in a module</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> module spam <span class="token punctuation">{</span> <span class="token builtin class-name">export</span> def foo <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token builtin class-name">export</span> def bar <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> use spam *<span class="token punctuation">;</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> + <span class="token punctuation">(</span>bar<span class="token punctuation">)</span>
foobar
</code></pre></div><p>To use commands with spaces, like subcommands, surround them with quotes</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> module spam <span class="token punctuation">{</span> <span class="token builtin class-name">export</span> def <span class="token string">&#39;foo bar&#39;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> use spam <span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">;</span> foo bar
baz
</code></pre></div><p>To use multiple definitions from a module, wrap them in a list</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> module spam <span class="token punctuation">{</span> <span class="token builtin class-name">export</span> def foo <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token builtin class-name">export</span> def <span class="token string">&#39;foo bar&#39;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> use spam <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span>, <span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> + <span class="token punctuation">(</span>foo bar<span class="token punctuation">)</span>
foobaz
</code></pre></div>`,20);function k(n,m){return p(),e("div",null,[a("h1",l,[i,s(),a("code",null,t(n.$frontmatter.title),1),s(" for core")]),a("div",r,t(n.$frontmatter.core),1),d])}const f=o(u,[["render",k],["__file","use.html.vue"]]);export{f as default};
